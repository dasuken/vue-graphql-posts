scalar Date

type User {
  _id: ID
  username: String!
  email: String!
  password: String!
  avatar: String
  joinDate: Date
  favorites: [Post]
}

type Post {
  _id: ID
  title: String
  imageUrl: String
  categories: [String]
  description: String
  createdDate: Date
  likes: Int
  createdBy: User
  messages: [Message]
}

type Message {
  _id: ID
  messageBody: String!
  messageDate: String
  messageUser: User!
}

type Token {
  token: String!
}

type PostPage {
  posts: [Post]
  hasMore: Boolean
}

type LikesFaves {
  likes: Int
  favorites: [Post]
}

type Query {
  getUser(query: String): User!
  getPosts: [Post]
  getPost(postId: ID!): Post!
  getUserPosts(userId: ID!): [Post]
  searchPosts(searchTerm: String!): [Post]
  getCurrentUser: User
  infiniteScrollPosts(pageNum: Int!, pageSize: Int!): PostPage
}

type Mutation {
  addPost(title: String!, imageUrl: String!, categories: [String]!, description: String!, creatorId: ID!): Post!
  deleteUserPost(postId: ID!): Post!
  addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
  signupUser(username: String!, email: String!, password: String!): Token
  signinUser(username: String!, password: String!): Token
  likePost(postId: ID!, username: String!): LikesFaves!
  unlikePost(postId: ID!, username: String!): LikesFaves!
  updateUserPost(postId: ID!, userId: ID!, title: String!, imageUrl: String!, categories: [String]!, description: String!): Post!
}